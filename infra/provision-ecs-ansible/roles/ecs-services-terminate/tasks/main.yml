---
- name: get list of services running in cluster
  ecs_service_facts:
    cluster: "{{ ECS_CLUSTER_NAME }}"
  register: services

- name: display services
  run_once: true
  debug:
    var: services.ansible_facts
  when: services

- name: display services
  run_once: true
  debug:
    msg: "{{services|json_query('ansible_facts.services[*]') }}"
  when: services

- name: display services with shell command
  run_once: true
  shell: |
    echo {{item | basename}}
  with_items: "{{services|json_query('ansible_facts.services[*]')}}"
  when: services

- name: Scale ECS services to 0
  ecs_service:
    # name: "ansible-test"
    name: "{{ item | basename }}"
    state: present
    desired_count: 0
    task_definition: 'basic_node_family:4'
    cluster: "{{ ECS_CLUSTER_NAME }}"
  with_items: "{{services|json_query('ansible_facts.services[*]')}}"
  when: services

- name: Terminate ECS services 
  ecs_service:
    name: "{{ item | basename }}"
    state: absent
    cluster: "{{ ECS_CLUSTER_NAME }}"
  with_items: "{{services|json_query('ansible_facts.services[*]')}}"
  when: services

# - name: Get EC2 instance IDs for registered container instances
#   ec2_instance_facts:
#     filters:
#       "tag:Type": ecs-container-instance
#       "tag:Role": ecs-shippable
#   register: instances
#
# - name: Remove registered container instances
#   ec2:
#     state: absent
#     instance_ids: "{{instances|json_query('instances[*].instance_id')}}"
#   when: instances

# - name: Terminate ECS Cluster {{ ECS_CLUSTER_NAME }}
#   ecs_cluster:
#     name: "{{ ECS_CLUSTER_NAME }}"
#     state: absent

# # update Shippable resource state with provisioned CLUSTER_ARN
# - name: run cmd
#   shell: |
#     shipctl put_resource_state "{{ STATE_RES_NAME }}" CLUSTER_ARN "{{ ecs.cluster.clusterArn }}"

