jobs:

# #---------------------------------------------------------------#
# #------------------------- INST PROF Setup -----------------------#
# #---------------------------------------------------------------#
#
# # SETUP Instance Profile with TERRAFORM
#   - name: setup_inst_prof
#     type: runSh
#     steps:
#       - IN: aws_region
#       - IN: inst_tf_state
#       - IN: aws_creds
#         switch: off
#       - IN: scripts_repo
#         switch: off
#       - TASK:
#         - script: . /build/IN/scripts_repo/gitRepo/tf_createInstProf.sh create
#       - OUT: inst_tf_state
#       - OUT: inst_prof_name
#     on_success:
#       - script: echo "SUCCESS"
#     on_failure:
#       - script: echo "FAILURE"
#     always:
#       - script: . /build/IN/scripts_repo/gitRepo/tf_archiveState.sh inst_tf_state
#
# # Delete Instance Profile with TERRAFORM
#   - name: delete_inst_prof
#     type: runSh
#     steps:
#       - IN: setup_inst_prof
#         switch: off
#       - IN: aws_region
#       - IN: inst_tf_state
#       - IN: aws_creds
#         switch: off
#       - IN: scripts_repo
#         switch: off
#       - TASK:
#         - script: . /build/IN/scripts_repo/gitRepo/tf_createInstProf.sh delete
#       - OUT: inst_tf_state
#     on_success:
#       - script: echo "SUCCESS"
#     on_failure:
#       - script: echo "FAILURE"
#     always:
#       - script: . /build/IN/scripts_repo/gitRepo/tf_archiveState.sh inst_tf_state


#---------------------------------------------------------------#
#------------------- BUILD/CI with SHIPPABLE CI ----------------#
#---------------------------------------------------------------#

 # PACKAGE sample Node.js into docker container

  - name: push-docker-hub_runCI
    type: runCI
    steps:
      - OUT: demo_doc_img

# DEFINE app micro service
  - name: create_app_man
    type: manifest
    steps:
      - IN: demo_doc_img
      - IN: doc_img_opts

#---------------------------------------------------------------#
#-------------- TEST Infra Prov Using ANsible  -----------------#
#---------------------------------------------------------------#

# PROV Test VPC with Ansible
  - name: prov_test_vpc
    type: runSh
    steps:
      - IN: create_app_man
      - IN: aws_cli_config
        switch: off
      - IN: aws_creds
        switch: off
      - IN: aws_pem
        switch: off
      - IN: ami_sec_approved
        switch: off
      - IN: scripts_repo
        switch: off
      - IN: test_conf
        switch: off
      - IN: test_vpc_conf
        switch: off
      - TASK:
        - script: shipctl replace
            $OPS_REPO_STATE/infra/provision-ecs-ansible/ansible.cfg
            $OPS_REPO_STATE/infra/provision-ecs-ansible/group_vars/ecs-cluster-vars.yml
        - script: sudo pip install boto3
        - script: |
            cd $SCRIPTSS_REPO_STATE/infra/provision-ecs-ansible
            ansible-playbook -v ansible-ecs-provision.yml
      - OUT: test_env_ecs
        overwrite: true
      - OUT: test_info
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"

##---------------------------------------------------------------#
##-------------------- App Release Automation -------------------#
##---------------------------------------------------------------#

# DEPLOY to TEST environment
  - name: deploy_app_test
    type: deploy
    steps:
      - IN: create_app_man
        switch: off
      - IN: prov_test_vpc
      - IN: test_env_ecs
        switch: off
      - TASK: managed

# RUN System Integration Testing
  - name: sit
    type: runSh
    steps:
      - IN: sit_repo
      - IN: deploy_app_test
      - IN: sit_params
      - TASK:
        - script: IN/sit_repo/gitRepo/test.sh sit_params
    on_success:
      - script: touch /build/state/success.txt
    on_failure:
      - script: touch /build/state/failure.txt

#---------------------------------------------------------------#
#----------------------- Deprov Test Infra----------------------#
#---------------------------------------------------------------#

# DEPROV TEST Infra with Ansible
  - name: deprov_test_infra
    type: runSh
    steps:
      - IN: sit
      - IN: aws_cli_config
        switch: off
      - IN: test_vpc_conf
        switch: off
      - IN: test_conf
        switch: off
      - IN: test_info
        switch: off
      - IN: aws_creds
        switch: off
      - IN: aws_pem
        switch: off
      - IN: scripts_repo
        switch: off
      - IN: ami_sec_approved
        switch: off
      - TASK:
        - script: shipctl replace
            $SCRIPTS_REPO_STATE/infra/provision-ecs-ansible/ansible.cfg
            $SCRIPTS_REPO_STATE/infra/provision-ecs-ansible/group_vars/ecs-cluster-vars.yml
        - script: sudo pip install boto3
        - script: |
            cd $SCRIPTS_REPO_STATE/infra/provision-ecs-ansible
            ansible-playbook -v ansible-ecs-terminate.yml
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"


# # DEPROV TEST VPC with Ansible
#   - name: deprov_test_vpc
#     type: runSh
#     steps:
#       - IN: aws_region
#       - IN: deprov_test_infra
#       - IN: test_conf
#         switch: off
#       - IN: test_info
#         switch: off
#       - IN: aws_creds
#         switch: off
#       - IN: scripts_repo
#         switch: off
#       - TASK:
#         - script: |
#             export AWS_ACCESS_KEY_ID=$(shipctl get_integration_resource_field aws_creds aws_access_key_id)
#             export AWS_SECRET_ACCESS_KEY=$(shipctl get_integration_resource_field aws_creds aws_secret_access_key)
#             cd $(shipctl get_resource_state scripts_repo)
#             shipctl replace an_vpc_deprov.yml
#             ansible-playbook -v an_vpc_deprov.yml
